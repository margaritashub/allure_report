{"name": "test_guest_can_register", "status": "broken", "statusDetails": {"message": "AttributeError: 'Options' object has no attribute 'binary'", "trace": "request = <SubRequest 'browser' for <Function test_guest_can_register>>\n\n    @pytest.fixture(scope='function')\n    def browser(request):\n        browser_name = request.config.getoption('browser').lower()\n        if browser_name == 'chrome':\n    \n            chrome_options = webdriver.ChromeOptions()\n            locale = request.config.getoption('language')\n            chrome_options.add_argument(f\"--lang={locale}\")\n            chrome_options.add_experimental_option('prefs', {'intl.accept_languages': locale})\n            browser = webdriver.Chrome(options=chrome_options)\n        elif browser_name == 'firefox':\n    \n    \n            ff_options = webdriver.ChromeOptions()\n            locale = request.config.getoption('language')\n            ff_options.add_argument(f\"--lang={locale}\")\n            ff_options.add_experimental_option('prefs', {'intl.accept_languages': locale})\n>           browser = webdriver.Firefox(options=ff_options)\n\nconftest.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'WebDriver' object has no attribute 'session_id'\") raised in repr()] WebDriver object at 0x1ecc6be62e0>\nfirefox_profile = None, firefox_binary = None, timeout = 30, capabilities = {'acceptInsecureCerts': True, 'browserName': 'firefox', 'marionette': True}\nproxy = None, executable_path = 'geckodriver', options = <selenium.webdriver.chrome.options.Options object at 0x000001ECC6BE60D0>\nservice_log_path = 'geckodriver.log', firefox_options = None, service_args = None, desired_capabilities = None, log_path = None, keep_alive = True\n\n    def __init__(self, firefox_profile=None, firefox_binary=None,\n                 timeout=30, capabilities=None, proxy=None,\n                 executable_path=\"geckodriver\", options=None,\n                 service_log_path=\"geckodriver.log\", firefox_options=None,\n                 service_args=None, desired_capabilities=None, log_path=None,\n                 keep_alive=True):\n        \"\"\"Starts a new local session of Firefox.\n    \n        Based on the combination and specificity of the various keyword\n        arguments, a capabilities dictionary will be constructed that\n        is passed to the remote end.\n    \n        The keyword arguments given to this constructor are helpers to\n        more easily allow Firefox WebDriver sessions to be customised\n        with different options.  They are mapped on to a capabilities\n        dictionary that is passed on to the remote end.\n    \n        As some of the options, such as `firefox_profile` and\n        `options.profile` are mutually exclusive, precedence is\n        given from how specific the setting is.  `capabilities` is the\n        least specific keyword argument, followed by `options`,\n        followed by `firefox_binary` and `firefox_profile`.\n    \n        In practice this means that if `firefox_profile` and\n        `options.profile` are both set, the selected profile\n        instance will always come from the most specific variable.\n        In this case that would be `firefox_profile`.  This will result in\n        `options.profile` to be ignored because it is considered\n        a less specific setting than the top-level `firefox_profile`\n        keyword argument.  Similarily, if you had specified a\n        `capabilities[\"moz:firefoxOptions\"][\"profile\"]` Base64 string,\n        this would rank below `options.profile`.\n    \n        :param firefox_profile: Instance of ``FirefoxProfile`` object\n            or a string.  If undefined, a fresh profile will be created\n            in a temporary location on the system.\n        :param firefox_binary: Instance of ``FirefoxBinary`` or full\n            path to the Firefox binary.  If undefined, the system default\n            Firefox installation will  be used.\n        :param timeout: Time to wait for Firefox to launch when using\n            the extension connection.\n        :param capabilities: Dictionary of desired capabilities.\n        :param proxy: The proxy settings to us when communicating with\n            Firefox via the extension connection.\n        :param executable_path: Full path to override which geckodriver\n            binary to use for Firefox 47.0.1 and greater, which\n            defaults to picking up the binary from the system path.\n        :param options: Instance of ``options.Options``.\n        :param service_log_path: Where to log information from the driver.\n        :param firefox_options: Deprecated argument for options\n        :param service_args: List of args to pass to the driver service\n        :param desired_capabilities: alias of capabilities. In future\n            versions of this library, this will replace 'capabilities'.\n            This will make the signature consistent with RemoteWebDriver.\n        :param log_path: Deprecated argument for service_log_path\n        :param keep_alive: Whether to configure remote_connection.RemoteConnection to use\n             HTTP keep-alive.\n        \"\"\"\n        if log_path:\n            warnings.warn('use service_log_path instead of log_path',\n                          DeprecationWarning, stacklevel=2)\n            service_log_path = log_path\n        if firefox_options:\n            warnings.warn('use options instead of firefox_options',\n                          DeprecationWarning, stacklevel=2)\n            options = firefox_options\n        self.binary = None\n        self.profile = None\n        self.service = None\n    \n        # If desired capabilities is set, alias it to capabilities.\n        # If both are set ignore desired capabilities.\n        if capabilities is None and desired_capabilities:\n            capabilities = desired_capabilities\n    \n        if capabilities is None:\n            capabilities = DesiredCapabilities.FIREFOX.copy()\n        if options is None:\n            options = Options()\n    \n        capabilities = dict(capabilities)\n    \n        if capabilities.get(\"binary\"):\n            self.binary = capabilities[\"binary\"]\n    \n        # options overrides capabilities\n        if options is not None:\n>           if options.binary is not None:\nE           AttributeError: 'Options' object has no attribute 'binary'\n\n..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py:137: AttributeError"}, "start": 1584548355324, "stop": 1584548355324, "uuid": "f847f7f1-134a-40a0-831b-5709d2825d0c", "historyId": "627654877eac3a5215f30f43f67f668d", "testCaseId": "45947b58caa03f6c70d4ae5eb1d4609f", "fullName": "test_make_report#test_guest_can_register", "labels": [{"name": "suite", "value": "test_make_report"}, {"name": "host", "value": "Asus"}, {"name": "thread", "value": "25188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_make_report"}]}